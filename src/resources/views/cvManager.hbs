<div class="container__manager-cv">
    <div class="main__manager-cv">
        <header>
            <h1>Manage the CV for the {{job.jobname}} job.</h1>
            <p>This job has a total of <b>{{count}}</b> CVs applying</p>
        </header>
        <section>
            <div class="header-section">
                <span class="cv-passed">Passed CVs</span>
                <span class="cv-failed">Failed CVs</span>
            </div>
            <div class="loading-manager">
                <div class="custom-loader"></div>
            </div>
                <div class="box__passed-cv">
                    <h2>In total, this job has <b>{{countPassed}}</b> CVs that have passed your company's requirements</h2>
                {{#each cvPassed}}
                    {{#each this.jobDetail}}
                        <div data-company-name="{{this.companyname}}" data-job-name="{{this.jobname}}" class="card__passed-cv">
                     {{/each}}
                        <div data-pathCV="{{this.namePath}}" class="primary-content__management">
                            <div class="left-content">
                                <span class="person-applied"><b>{{this.name}}</b></span>
                                {{#if this.professional}}
                                    <span class="headline">{{this.professional}}</span>
                                {{else}}
                                {{/if}}
                            </div>
                            <div class="right-content">
                                {{#each this.userDetail}}
                                    <img class="avatar-managerment" src="/{{this.avatar}}" alt="">
                                {{/each}}
                            </div>
                        </div>
                        <span class="score-applied" data-score="{{this.score}}"></span>
                        <span class="email-applied"><span class="material-symbols-outlined">contact_mail</span> {{this.email}}</span>
                        <span class="phone-applied"><span class="material-symbols-outlined">contact_phone</span> {{this.phone}}</span>
                       <span class="posted-date"><span class="material-symbols-outlined">fact_check</span> {{this.createdAt}}</span>
                       <div class="action-card__passed-cv">
                            <button class="show-invite"><span class="material-symbols-outlined">send</span> Invite</button>
                            <a class="download__cv-passed" download=""><span class="material-symbols-outlined">cloud_download</span> Download CV</a>
                            <form class="invite-candidate" method="post" action="/CVManager/send?q={{this._id}}">
                                <div class="box-invite">
                                    <h6>Select a time and date for interview invitations to candidates.</h6>
                                    <div class="box-field">
                                        <label for="time-invite-{{this._id}}">Choose Time To Invite</label>
                                        <input id="time-invite-{{this._id}}" name="time" type="time" required>
                                    </div>
                                    <div class="box-field">
                                        <label for="date-invite-{{this._id}}">Choose Date To Invite</label>
                                        <input id="date-invite-{{this._id}}" name="date" type="date" required>
                                    </div>
                                    <input name="email" type="text" value="{{this.email}}" hidden>
                                    <button class="submit-invite">
                                        <span class="material-symbols-outlined">send</span> 
                                        Send Mail
                                    </button>
                                    <div class="close-invite"><i class="bi bi-x"></i></div>
                                </div>
                            </form>
                       </div>
                    </div>
                {{/each}}
                <div class="pagination pagination-pass" data-id-pagination-pass="{{job._id}}">
                    {{#each pagesPassed}}
                    <a data-page="{{this}}">{{this}}</a>
                    {{/each}}
                </div>
                </div>
                <div class="box__failed-cv">
                    <h2>In total, this job has <b>{{countFailed}}</b> CVs that have failed your company's requirements</h2>
                {{#each cvFailed}}
                    {{#each this.jobDetail}}
                        <a data-company-name="{{this.companyname}}" data-job-name="{{this.jobname}}" class="card__failed-cv" download>
                    {{/each}}
                        <div data-pathCV="{{this.namePath}}" class="primary-content__management">
                            <div class="left-content">
                                <span class="person-applied"><b>{{this.name}}</b></span>
                                {{#if this.professional}}
                                    <span class="headline">{{this.professional}}</span>
                                {{else}}
                                {{/if}}
                            </div>
                            <div class="right-content">
                                {{#each this.userDetail}}
                                    <img class="avatar-managerment" src="/{{this.avatar}}" alt="">
                                {{/each}}
                            </div>
                        </div>
                        <span class="score-applied" data-score="{{this.score}}"></span>
                        <span class="email-applied"><span class="material-symbols-outlined">contact_mail</span> {{this.email}}</span>
                        <span class="phone-applied"><span class="material-symbols-outlined">contact_phone</span> {{this.phone}}</span>
                       <span class="name-file"><span class="material-symbols-outlined">cloud_download</span> <span>{{this.nameCV}}</span></span>
                    </a>
                {{/each}}
                <div class="pagination pagination-fail" data-id-pagination-fail="{{job._id}}">
                    {{#each pagesFailed}}
                    <a data-page="{{this}}">{{this}}</a>
                    {{/each}}
                </div>
                </div>
        </section>
    </div>
</div>
<script>
    var clickPassed = document.querySelector('.cv-passed');
    var clickFailed = document.querySelector('.cv-failed');
    var containerPassed = document.querySelector('.box__passed-cv');
    var containerFailed = document.querySelector('.box__failed-cv');
    var loadingManagerCV = document.querySelector('.loading-manager');
    var passedClicked = false;
    var failedClicked = false;
    document.addEventListener("DOMContentLoaded", function() {
    passedClicked = false;
    failedClicked = true;
    var showPassCV = localStorage.getItem('boxPassCV');
    var showFailCV = localStorage.getItem('boxFailCV');
    if(showPassCV === "show"){
        containerPassed.style.display = 'flex';
        containerFailed.style.display = 'none';
        passedClicked = false;
        failedClicked = true;
        clickPassed.style.cssText = 'border-bottom: 3px solid #0095ff; color: #0095ff; cursor: default;';
        clickFailed.style.cssText = 'border-bottom: unset; color: black; cursor: pointer;';
    } else if(showFailCV === "show"){
        containerFailed.style.display = 'flex';
        containerPassed.style.display = 'none';
        failedClicked = false;
        passedClicked = true;
        clickFailed.style.cssText = 'border-bottom: 3px solid #0095ff; color: #0095ff; cursor: default';
            clickPassed.style.cssText = 'border-bottom: unset; color: black; cursor: pointer;';
    }
    });
    clickPassed.addEventListener('click',()=>{
        if(passedClicked){
            passedClicked = false;
            localStorage.setItem('boxPassCV', 'show')
            localStorage.setItem('boxFailCV', 'hide')
            clickPassed.style.cssText = 'border-bottom: 3px solid #0072bc; color: #0072bc; cursor: default;';
            clickFailed.style.cssText = 'border-bottom: unset; color: black; cursor: pointer;';
            containerFailed.style.display = 'none';
            loadingManagerCV.style.display = 'flex';
            setTimeout(function(){
            loadingManagerCV.style.display = 'none';
            },1750);
            setTimeout(function(){
            containerPassed.style.display = 'flex';
            failedClicked = true;
            },1780)
        }
    });
    clickFailed.addEventListener('click',()=>{
        if(failedClicked){
            failedClicked = false;
            localStorage.setItem('boxFailCV', 'show')
            localStorage.setItem('boxPassCV', 'hide')
            clickFailed.style.cssText = 'border-bottom: 3px solid #0072bc; color: #0072bc; cursor: default';
            clickPassed.style.cssText = 'border-bottom: unset; color: black; cursor: pointer;';
            containerPassed.style.display = 'none';
            loadingManagerCV.style.display = 'flex';
            setTimeout(function(){
            loadingManagerCV.style.display = 'none';
            },1750);
            setTimeout(function(){
            containerFailed.style.display = 'flex';
            passedClicked = true;
            },1780)
        }
    });
    var getPaginationPass = document.querySelectorAll('.pagination-pass a');
    var paginationContainerPass = document.querySelector('.pagination-pass');
    var getIDPaginationPass = paginationContainerPass.getAttribute('data-id-pagination-pass');
    if (getPaginationPass.length > 1) {
    paginationContainerPass.style.display = 'flex';
    } else {
    paginationContainerPass.style.display = 'none';
    }
    getPaginationPass.forEach(function(pageLink) {
    var page = pageLink.getAttribute('data-page');
    pageLink.href = `/CVManager?id=${getIDPaginationPass}&pagePassed=${page}`;
    pageLink.addEventListener('click', function(event) {
        if (pageLink.classList.contains('active')) {
        event.preventDefault();
        } else {
        localStorage.setItem('currentPagePassCV', page);
        }
    });
    });

    var getPaginationFail = document.querySelectorAll('.pagination-fail a');
    var paginationContainerFail = document.querySelector('.pagination-fail');
    var getIDPaginationFail = paginationContainerFail.getAttribute('data-id-pagination-fail');
    if (getPaginationFail.length > 1) {
    paginationContainerFail.style.display = 'flex';
    } else {
    paginationContainerFail.style.display = 'none';
    }
    getPaginationFail.forEach(function(pageLink) {
    var page = pageLink.getAttribute('data-page');
    pageLink.href = `/CVManager?id=${getIDPaginationFail}&pageFailed=${page}`;
    pageLink.addEventListener('click', function(event) {
        if (pageLink.classList.contains('active')) {
        event.preventDefault();
        } else {
        localStorage.setItem('currentPageFailCV', page);
        }
    });
    });

    document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const pageFromURL = urlParams.get('page');
    const currentPage = pageFromURL || localStorage.getItem('currentPagePassCV');
    if (currentPage !== null) {
        getPaginationPass.forEach(function(pageLink) {
        var page = pageLink.getAttribute('data-page');
        if (page == currentPage) {
            pageLink.classList.add('active');
        } else {
            pageLink.classList.remove('active');
        }
        });
    }
    const urlParamsFail = new URLSearchParams(window.location.search);
    const pageFromURLFail = urlParamsFail.get('page');
    const currentPageFail = pageFromURLFail || localStorage.getItem('currentPageFailCV');
    if (currentPageFail !== null) {
        getPaginationFail.forEach(function(pageLink) {
        var page = pageLink.getAttribute('data-page');
        if (page == currentPageFail) {
            pageLink.classList.add('active');
        } else {
            pageLink.classList.remove('active');
        }
        });
    }
    });
    const containerCVFailed = document.querySelectorAll('.card__failed-cv');
    containerCVFailed.forEach(item=>{
        const scoreText = item.querySelector('.score-applied');
        let scoreData = scoreText.getAttribute('data-score');
        if(scoreData === '' || scoreData === "NaN"){
            scoreData = '0'
        }
        const score = parseFloat(scoreData);
        scoreText.innerHTML = `<i class="bi bi-stars"></i> ${score}% match`
        const linkCompanyName = item.getAttribute('data-company-name');
        const linkJobName = item.getAttribute('data-job-name');
        const pathCV = item.querySelector('.primary-content__management').getAttribute('data-pathCV')
        item.href = `/applyCV/${linkCompanyName}/${linkJobName}/unsatisfactory/${pathCV}.pdf`
    })
    const containerCVPassed = document.querySelectorAll('.card__passed-cv');
    containerCVPassed.forEach(item=>{
        const scoreText = item.querySelector('.score-applied');
        let  scoreData = scoreText.getAttribute('data-score');
        if(scoreData === '' || scoreData === "NaN"){
            scoreData = '0'
        }
        const score = parseFloat(scoreData) * 100;
        scoreText.innerHTML = `<i class="bi bi-stars"></i> ${score}% match`
        const linkCompanyName = item.getAttribute('data-company-name');
        const linkJobName = item.getAttribute('data-job-name');
        const pathCV = item.querySelector('.primary-content__management').getAttribute('data-pathCV')
        const downloadCVPassed = item.querySelector('.download__cv-passed')
        downloadCVPassed.href = `/applyCV/${linkCompanyName}/${linkJobName}/Qualified/${pathCV}.pdf`
        const formInviteCandidate = item.querySelector('.invite-candidate');
        const buttonShowInvite = item.querySelector('.show-invite');
        const closeInvite = item.querySelector('.close-invite');
        const boxInvite = item.querySelector('.box-invite');
        buttonShowInvite.addEventListener('click',()=>{
            formInviteCandidate.style.cssText = 'transform: scale(100%);';
        })
        closeInvite.addEventListener('click',()=>{
            formInviteCandidate.style.cssText = 'transform: scale(0);';
        })
        formInviteCandidate.addEventListener('click',()=>{
            formInviteCandidate.style.cssText = 'transform: scale(0);';
        })
        boxInvite.addEventListener('click',(e)=>{
            e.stopPropagation();
        })
    })
</script>